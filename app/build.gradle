plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
}

ext {
    openTelemetryVersion = "1.10.1"
    openTelemetryAlphaVersion = "1.10.1-alpha"

    grpcVersion = '1.34.1'
    protobufVersion = '3.11.4'
    protocVersion = protobufVersion
}

println("Building against OpenTelemetry version: $openTelemetryVersion")

android {
    compileSdkVersion 32
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.raju.disney"
        minSdkVersion 24
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding { enabled true }
    viewBinding { enabled true }

    buildTypes {
        debug {
            //Right now I am passing Api key directly here as string but we make more secure
            //Putting inside properties file then reading from properties file
            buildConfigField 'String', "BASE_URL", '"https://gateway.marvel.com/v1/"'
            buildConfigField 'String', "API_KEY", '"10e88d985270066d379d5d616b0d9279"'
            buildConfigField 'String', "P_API_KEY", '"3b776490962b3bdb0ec3a42fe3f6a522de081c5b"'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', "BASE_URL", '"https://gateway.marvel.com/v1"'
            buildConfigField 'String', "API_KEY", '"10e88d985270066d379d5d616b0d9279"'
            buildConfigField 'String', "P_API_KEY", '"3b776490962b3bdb0ec3a42fe3f6a522de081c5b"'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    //Todo Version can be extracted to constant variable in real app
    //Todo For now I am adding directly here

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation 'androidx.core:core-ktx:1.8.0-alpha04'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.1"

    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:2.4.1"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2"

    //networking
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.2'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    //Hilt For dependency injection
    implementation "androidx.hilt:hilt-compiler:1.0.0"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    //imaging
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    // Testing
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.3"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.2"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'org.mockito:mockito-core:3.9.0'
    androidTestImplementation 'org.mockito:mockito-android:3.9.0'
    testImplementation 'org.mockito:mockito-inline:2.21.0'
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.2.0"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    implementation platform("io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}")
    implementation platform("io.opentelemetry:opentelemetry-bom-alpha:${openTelemetryAlphaVersion}")
    implementation platform("io.grpc:grpc-bom:${grpcVersion}")
    implementation("io.opentelemetry:opentelemetry-api")
    implementation("io.opentelemetry:opentelemetry-sdk")
    implementation("io.opentelemetry:opentelemetry-exporter-jaeger")
    implementation("io.opentelemetry:opentelemetry-extension-annotations")
    implementation("io.opentelemetry:opentelemetry-exporter-logging")
    implementation("io.opentelemetry:opentelemetry-exporter-zipkin")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp")

    //pull in the autoconfigure extension so we parse the `otel.resource.attributes` system property used in the example.
    implementation("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure")
    implementation("io.opentelemetry:opentelemetry-sdk-metrics")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp-metrics")

    //alpha modules
    implementation("io.opentelemetry:opentelemetry-semconv")
    implementation("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure")
}

kapt {
    correctErrorTypes true
}